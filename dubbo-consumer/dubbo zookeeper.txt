三、ZooKeeper概述
ZooKeeper是一种为分布式应用所设计的高可用、高性能且一致的开源协调服务，它提供了一项基本服务：分布式锁服务。由于ZooKeeper的开源特性，后来我们的开发者在分布式锁的基础上，摸索了出了其他的使用方法：配置维护、组服务、分布式消息队列、分布式通知/协调等。

注意：ZooKeeper性能上的特点决定了它能够用在大型的、分布式的系统当中。从可靠性方面来说，它并不会因为一个节点的错误而崩溃。除此之外，它严格的序列访问控制意味着复杂的控制原语可以应用在客户端上。ZooKeeper在一致性、可用性、容错性的保证，也是ZooKeeper的成功之处，它获得的一切成功都与它采用的协议——Zab协议是密不可分的，这些内容将会在后面介绍。

前面提到了那么多的服务，比如分布式锁、配置维护、组服务等，那它们是如何实现的呢，我相信这才是大家关心的东西。
ZooKeeper在实现这些服务时，首先它设计一种新的数据结构——Znode，然后在该数据结构的基础上定义了一些原语，
也就是一些关于该数据结构的一些操作。有了这些数据结构和原语还不够，因为我们的ZooKeeper是工作在一个分布式的环境下，
我们的服务是通过消息以网络的形式发送给我们的分布式应用程序，所以还需要一个通知机制——Watcher机制。那么总结一下，
ZooKeeper所提供的服务主要是通过：数据结构+原语+watcher机制，三个部分来实现的。那么我就从这三个方面，给大家介绍一下ZooKeeper。




第一：介绍Dubbo背景




大规模服务化之前，应用可能只是通过RMI或Hessian等工具，简单的暴露和引用远程服务，通过配置服务的URL地址进行调用，通过F5等硬件进行负载均衡。
(1) 当服务越来越多时，服务URL配置管理变得非常困难，F5硬件负载均衡器的单点压力也越来越大。
此时需要一个服务注册中心，动态的注册和发现服务，使服务的位置透明。
并通过在消费方获取服务提供方地址列表，实现软负载均衡和Failover，降低对F5硬件负载均衡器的依赖，也能减少部分成本。
(2) 当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。
这时，需要自动画出应用间的依赖关系图，以帮助架构师理清理关系。
(3) 接着，服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？
为了解决这些问题，第一步，要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。
其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阀值，记录此时的访问量，再以此访问量乘以机器数反推总容量。

第二：Dubbo的简介
Dubbo是一个分布式服务框架,解决了上面的所面对的问题，Dubbo的架构如图所示：

节点角色说明：
Provider: 暴露服务的服务提供方。
Consumer: 调用远程服务的服务消费方。
Registry: 服务注册与发现的注册中心。
Monitor: 统计服务的调用次调和调用时间的监控中心。
Container: 服务运行容器。

调用关系说明：
0. 服务容器负责启动，加载，运行服务提供者。
1. 服务提供者在启动时，向注册中心注册自己提供的服务。
2. 服务消费者在启动时，向注册中心订阅自己所需的服务。
3. 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
4. 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
5. 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。


 Dubbo提供了很多协议，Dubbo协议、RMI协议、Hessian协议，我们查看Dubbo源代码，有各种协议的实现，如图所示：

我们之前没用Dubbo之前时，大部分都使用Hessian来使用我们服务的暴露和调用，利用HessianProxyFactory调用远程接口。

上面是参考了Dubbo官方网介绍，接下来我们来介绍SpringMVC、Dubbo、Zookeeper整合使用。

第三：Dubbo与Zookeeper、SpringMVC整合使用

  第一步：在Linux上安装Zookeeper
       Zookeeper作为Dubbo服务的注册中心，Dubbo原先基于数据库的注册中心，没采用Zookeeper，Zookeeper一个分布式的服务框架，是树型的目录服务的数据存储，能做到集群管理数据 ，这里能很好的作为Dubbo服务的注册中心，Dubbo能与Zookeeper做到集群部署，当提供者出现断电等异常停机时，Zookeeper注册中心能自动删除提供者信息，当提供者重启时，能自动恢复注册数据，以及订阅请求。我们先在linux上安装Zookeeper，我们安装最简单的单点，集群比较麻烦。
    （1）下载Zookeeper-3.4.6.tar.gz  地址http://www.apache.org/dist/zookeeper/
    （2） 我们放到Linux下的一个文件夹，然后解压：
      #tar zxvf zookeeper-3.4.6.tar.gz
  （3）然后在对应的zookeeper-3.4.6/conf 下有一个文件zoo_sample.cfg的这个文件里面配置了监听客户端连接的端口等一些信息，Zookeeper 在启动时会找zoo.cfg这个文件作为默认配置文件,所以我们复制一个名称为zoo.cfg的文件，如图所示：

   我们查看一下这个文件的里面的一些配置信息，如图所示：


说明：
 clientPort：监听客户端连接的端口。
 tickTime：基本事件单元，以毫秒为单位。它用来控制心跳和超时，默认情况下最小的会话超时时间为两倍的 tickTime。
 我们可以对配置文件的端口等或者进行高级配置和集群配置例如：maxClientCnxns：限制连接到 ZooKeeper 的客户端的数量等
 (4)启动Zookeeper 的服务，如图所示：

 到这边Zookeeper的安装和配置完成
  第二步：配置dubbo-admin的管理页面，方便我们管理页面
    (1)下载dubbo-admin-2.4.1.war包，在Linux的tomcat部署，先把dubbo-admin-2.4.1放在tomcat的webapps/ROOT下，然后进行解压：
        #jar -xvf dubbo-admin-2.4.1.war
    (2)然后到webapps/ROOT/WEB-INF下，有一个dubbo.properties文件，里面指向Zookeeper ，使用的是Zookeeper 的注册中心，如图所示：

   (3)然后启动tomcat服务，用户名和密码：root,并访问服务，显示登陆页面，说明dubbo-admin部署成功，如图所示：

  第三步：SpringMVC与Dubbo的整合，这边使用的Maven的管理项目
    第一：我们先开发服务注册的，就是提供服务，项目结构如图所示：

    （1）test-maven-api项目加入了一个服务接口，代码如下：
public interface TestRegistryService {
   public String hello(String name);
}
  （2）test-maven-console在pom.xml加入Dubbo和Zookeeper的jar包、引用test-maven-api的jar包，代码如下：

      <dependency>
  		<groupId>cn.test</groupId>
  		<artifactId>test-maven-api</artifactId>
  		<version>0.0.1-SNAPSHOT</version>
  	</dependency>

      <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>dubbo</artifactId>
            <version>2.5.3</version>
        </dependency>

         <dependency>
            <groupId>org.apache.zookeeper</groupId>
			<artifactId>zookeeper</artifactId>
			<version>3.4.6</version>
        </dependency>

      <dependency>
     	 <groupId>com.github.sgroschupf</groupId>
		 <artifactId>zkclient</artifactId>
		 <version>0.1</version>
      </dependency>
(3)test-maven-console实现具体的服务，代码如下：

  @Service("testRegistryService")
public class TestRegistryServiceImpl implements TestRegistryService {
	public String hello(String name) {
		return "hello"+name;
	}
}

(4)我们服务以及实现好了，这时要暴露服务，代码如下：

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	<span style="color:#cc0000;">xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"</span>
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
	<span style="color:#990000;">http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span>
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"
	default-lazy-init="false" >
   <!-- 提供方应用名称信息，这个相当于起一个名字，我们dubbo管理页面比较清晰是哪个应用暴露出来的 -->
   <dubbo:application name="dubbo_provider"></dubbo:application>
   <!-- 使用zookeeper注册中心暴露服务地址 -->
   <dubbo:registry address="zookeeper://127.0.0.1:2181" check="false" subscribe="false" register=""></dubbo:registry>
  <!-- 要暴露的服务接口 -->
  <dubbo:service interface="cn.test.dubbo.registry.service.TestRegistryService" ref="testRegistryService" />
</beans>

说明：
   dubbo:registry 标签一些属性的说明：
      1）register是否向此注册中心注册服务，如果设为false，将只订阅，不注册。
      2）check注册中心不存在时，是否报错。
      3）subscribe是否向此注册中心订阅服务，如果设为false，将只注册，不订阅。
      4）timeout注册中心请求超时时间(毫秒)。
      5）address可以Zookeeper集群配置，地址可以多个以逗号隔开等。
  dubbo:service标签的一些属性说明：
     1）interface服务接口的路径
     2）ref引用对应的实现类的Bean的ID
     3）registry向指定注册中心注册，在多个注册中心时使用，值为<dubbo:registry>的id属性，多个注册中心ID用逗号分隔，如果不想将该服务注册到任何registry，可将值设为N/A
     4）register 默认true ，该协议的服务是否注册到注册中心。

  (5)启动项目，然后我们在Dubbo管理页面上显示，已经暴露的服务，但显示还没有消费者，因为我们还没实现消费者服务，如图所示：

   第二：我们在开发服务消费者，就是调用服务，我们在新建一个新的消费者项目结构如图所示：


   （1）test-maven-server-console的pom.xml引入Dubbo和Zookeeper的jar包、test-maven-api的jar包，因为引入test-maven-api的jar包，我们在项目中调用像在本地调用一样。代码如下：

      <dependency>
  		<groupId>cn.test</groupId>
  		<artifactId>test-maven-api</artifactId>
  		<version>0.0.1-SNAPSHOT</version>
  	</dependency>

      <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>dubbo</artifactId>
            <version>2.5.3</version>
        </dependency>

         <dependency>
            <groupId>org.apache.zookeeper</groupId>
			<artifactId>zookeeper</artifactId>
			<version>3.4.6</version>
        </dependency>

      <dependency>
     	 <groupId>com.github.sgroschupf</groupId>
		 <artifactId>zkclient</artifactId>
		 <version>0.1</version>
      </dependency>

  （2）test-maven-server-console项目的具体实现，代码如下：


@Controller
public class IndexController {

	@Autowired
	private TestRegistryService testRegistryService;

	@RequestMapping("/hello")
	public String index(Model model){
	     String name=testRegistryService.hello("zz");
	     System.out.println("xx=="+name);
		return "";
	}

}

  (3)我们要引用的地址，代码如下：

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	<span style="background-color: rgb(255, 255, 255);"><span style="color:#990000;">xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"</span></span>
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
	<span style="color:#990000;">http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span>
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"
	default-lazy-init="false" >

   <dubbo:application name="dubbo_consumer"></dubbo:application>
   <!-- 使用zookeeper注册中心暴露服务地址 -->
   <dubbo:registry address="zookeeper://192.168.74.129:2181" check="false"></dubbo:registry>
     <!-- 要引用的服务 -->
   <dubbo:reference interface="cn.test.dubbo.registry.service.TestRegistryService" id="testRegistryService"></dubbo:reference>
</beans>
说明：
   dubbo:reference 的一些属性的说明：
      1）interface调用的服务接口
      2）check 启动时检查提供者是否存在，true报错，false忽略
      3）registry 从指定注册中心注册获取服务列表，在多个注册中心时使用，值为<dubbo:registry>的id属性，多个注册中心ID用逗号分隔
      4）loadbalance 负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮循，最少活跃调用

(4)项目启动，Dubbo管理页面，能看到消费者，如图所示：

(5)然后访问消费者项目，Controller层能像调用本地一样调用服务的具体实现，如图所示：



zeekeeper


一、Zookeeper简介
二、Zab协议

一、Zookeeper简介
Zookeeper 是一个开放源代码分布式协调服务，雅虎创建。是Google Chubby的开源实现，与Chubby不同的是Chubby完全是 Paxos协议的工程实现，而Zookeeper 是ZAB协议的特定实现。

Zookeeper 分布式一致性的特点如下：
顺序一致性 ： 同一客户端访问 Zookeeper 的一个 节点，发起事务请求，严格按照发起顺序应用到Zookeeper。
单一视图 ： 任何节点上的数据都是一样的，所以客户端访问任意节点 都是看到是相同的数据。
可靠性： 一旦服务端成功应用了一个事务，并完成响应，那该事务引起的服务端变更会一直保留下来，除非另一个事务对其进行了变更。
实时性：Zookeeper保证在一定时间内，比如5秒之后你可以访问到最新数据。

Zookeeper设计目标：
简单的数据模型： 就是文件夹的树形结构。
可以构建集群： 肯定是可以，不可以那还叫分布式吗。集群模式示意图：

顺序访问：客户端提出了一个事务请求会获得一个唯一的id编号用于操作的先后顺序。
高性能： 这里指的是读取数据 。

Zookeeper基本概念：
集群角色：Leader， Follower ，Observer，集群中所有机器通过选举过程选举Leader机器，Leader服务器为客户端提供读写服务，Follower和Observer也可以可以提供读服务，区别在于Observer不参与Leader选举过程
数据节点（Znode）：节点分两类，第一种是构成集群的机器成为机器节点，另一种是数据模型中的数据单元，称为数据节点Znode，Zookeeper将所有数据存储在内存中，数据模型是一棵树，由斜杠进行分割的路径就是一个Znode,例如/a,Znode保存自己的数据内容，并且保存一系列属性信息。
Znode分为持久节点和临时节点，持久节点指的是一旦被创建，除非主动移除，不然就会一直存在，临时节点指的是与此绑定的客户端会话一旦失效，客户端创建的所有临时节点都会被移除。
watcher 监听机制 ：Zookeeper有watcher 监听机制，在一些特定事务发生时可以触发一些操作。例如 你注册了一个临时数据节点，如果你客户session中断了，临时节点就删除了， 这时 watcher就监听到了，通知实现了代码
ACL：类unix文件系统的权限控制，定义了以下5种控制权限
CREATE:创建子节点权限
READ:获取节点数据和子节点列表权限
WRITE:更新节点数据权限
DELETE:删除子节点权限
ADMIN:设置节点ACL权限
其中CREATE和DELETE都是针对子节点的权限。

二、Zab协议
Zab 中的 三种状态：
1. Looking ：系统刚启动时或者Leader崩溃后正处于选举状态
2. Following ：Follower节点所处的状态，Follower与Leader处于数据同步阶段；
3. Leading ：Leader所处状态，当前集群中有一个Leader为主进程；
ZooKeeper启动时所有节点初始状态为Looking，这时集群会尝试选举出一个Leader节点，选举出的Leader节点切换为Leading状态；当节点发现集群中已经选举出Leader则该节点会切换到Following状态，然后和Leader节点保持同步；当Follower节点与Leader失去联系时Follower节点则会切换到Looking状态
，开始新一轮选举；在ZooKeeper的整个生命周期中每个节点都会在Looking、Following、Leading状态间不断转换；

当启动后Leader 崩溃选举：
选举出Leader节点后ZAB进入原子广播阶段，这时Leader为和自己同步的每个节点Follower创建一个操作序列，一个时期一个Follower只能和一个Leader保持同步，Leader节点与Follower节点使用心跳检测来感知对方的存在；当Leader节点在超时时间内收到来自Follower的心跳检测，那Follower节点会一直与该节点保持连接；若超时时间内Leader没有接收到来自过半Follower节点的心跳检测或TCP连接断开，那Leader会结束当前周期的领导，切换到Looking状态，所有Follower节点也会放弃该Leader节点切换到Looking状态，然后开始新一轮选举；
zab 宏观上的 三个阶段：崩溃恢复、快速选举、原子广播；
zab 的 微观上的 四个阶段： 选举 、（恢复分成发现和同步） 发现、同步、广播
第一阶段：准备 leader 选举，成为 leader 的条件：选epoch最大的，当epoch相等时，选 zxid最大的，当epoch和zxid都相等，选择serverid最大的（就是我们配置zoo.cfg中的myid），节点在选举开始都默认投票给自己，当接收其他节点的选票时，会根据上面的条件更改自己的选票并重新发送选票给其他节点，当有一个节点的得票超过半数，该节点会设置自己的状态为 leading，其他节点会设置自己的状态为 following。
注：zxid 是64位,前32位是当前leader编号也就是epoch，后32位是这个leader下事务编号zxid，当Leader重新选举后，epoch会加1，后32位的事务编号会清零并从0开始。
第二阶段：发现阶段 主要是发现最大的epoch 和最大的事物编号
第三阶段 就是 同步数据，leader 利用上个阶段知道最大事物编号， 然后通知 其它 fllower去leader这同步数据。
第四阶段 ：  原子广播阶段，这时候 leader 正真对外提供服务接受客户端的请求，生成 一个事务，半数以上同意 然后 就提交事物，剩下的其它节点直接去 leader 那同步数据。
总结：
选举 、发现、同步这几个阶段中是 looking 状态，当这些结束后是Leader  和Fllower 状态，这个过程是 广播状态。也就是客户端提交一个请求到 leader然后 leader发起提议 fllower来投票 ，这个整个过程都是原子广播。我们可以笼统的称它有两个阶段： 恢复和广播
把 选举 、发现 、同步 统称为恢复 leader---也就是 产生leader 的过程，当产生完 leader 然后 就可以接受客户端做出提议的过程叫做原子广播。

